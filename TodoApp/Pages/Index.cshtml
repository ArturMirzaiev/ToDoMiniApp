@page
@model TodoApp.Pages.IndexModel
@{
    ViewData["Title"] = "To-Do List";
    
}

<header class="d-flex justify-content-between align-items-center mb-4">
    <h1>To-Do List</h1>

    <div class="timer-container d-flex align-items-center gap-2">
        <span id="timerDisplay" style="min-width: 70px; font-weight: bold;">00:00</span>
        <button id="startTimerBtn" class="btn btn-danger btn-sm">Старт</button>
        <button id="resetTimerBtn" class="btn btn-secondary btn-sm">Скинути</button>
        <button id="themeToggleBtn" class="btn btn-outline-primary btn-sm ms-2">🌓 Тема</button>
    </div>
</header>
<div class="modal fade" id="timeExpiredModal" tabindex="-1" aria-labelledby="timeExpiredModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="timeExpiredModalLabel">Час вийшов!</h5>
            </div>
            <div class="modal-body">
                Таймер завершив роботу.
            </div>
            <div class="modal-footer">
                <button type="button" id="modalOkBtn" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
<form method="post" class="input-group mb-3">
    <span asp-validation-for="NewTodo.Title" class="text-danger"></span>
    <input asp-for="NewTodo.Title" class="form-control" placeholder="Нова задача"/>
    <button type="submit" class="btn btn-primary">Додати</button>
</form>

<ul class="list-group">
    @foreach (var item in Model.TodoItems)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center 
            @(item.IsDone ? "bg-secondary text-white" : "") animate__animated animate__fadeIn">
            
            <!-- LEFT: checkbox -->
            <form method="post" asp-page-handler="Toggle" asp-route-id="@item.Id" class="m-0 p-0 me-3">
                <input class="form-check-input" type="checkbox" onchange="this.form.submit()" @(item.IsDone ? "checked" : "") />
            </form>

            <!-- CENTER: title + dates -->
            <div class="flex-grow-1">
                <div class="fw-semibold @(item.IsDone ? "text-decoration-line-through text-white-50" : "")">
                    @item.Title
                </div>
                <small class="text-muted">
                    🕒 Створено: @item.CreatedAt.ToString("d MMMM HH:mm", new System.Globalization.CultureInfo("uk-UA"))
                    @if (item.IsDone && item.CompletedAt.HasValue)
                    {
                        <span class="ms-3 text-success">
                            ✅ Виконано: @item.CompletedAt.Value.ToLocalTime().ToString("d MMMM HH:mm", new System.Globalization.CultureInfo("uk-UA"))
                        </span>
                    }
                </small>
            </div>

            <!-- RIGHT: edit + delete -->
            <div class="d-flex align-items-center ms-3">
                <form method="post" asp-page-handler="Delete" asp-route-id="@item.Id"
                      onsubmit="return confirm('Ви впевнені, що хочете видалити задачу?')" class="m-0 p-0">
                    <button type="submit" class="btn btn-sm btn-outline-danger">🗑️</button>
                </form>
            </div>
        </li>
    }
</ul>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const toastText = @Html.Raw(Json.Serialize(TempData["Toast"]));
        if (toastText) {
            document.getElementById('toastBody').innerText = toastText;
            const toast = new bootstrap.Toast(document.getElementById('toastMessage'));
            toast.show();
        }
    </script>
    <script>
(() => {
    const TIMER_KEY = 'todoAppTimerEnd';
    const timerDisplay = document.getElementById('timerDisplay');
    const startBtn = document.getElementById('startTimerBtn');
    const resetBtn = document.getElementById('resetTimerBtn');

    let intervalId = null;
    let beepIntervalId = null;
    let audioCtx = null;

    // Ініціалізація Bootstrap Modal
    const timeExpiredModal = new bootstrap.Modal(document.getElementById('timeExpiredModal'));
    const modalOkBtn = document.getElementById('modalOkBtn');

    function formatTime(seconds) {
        const m = Math.floor(seconds / 60).toString().padStart(2, '0');
        const s = (seconds % 60).toString().padStart(2, '0');
        return `${m}:${s}`;
    }

    function playBeep() {
        if (!audioCtx) {
            audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        }

        const oscillator = audioCtx.createOscillator();
        const gainNode = audioCtx.createGain();

        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(1000, audioCtx.currentTime);
        gainNode.gain.setValueAtTime(0.2, audioCtx.currentTime);

        oscillator.connect(gainNode);
        gainNode.connect(audioCtx.destination);

        oscillator.start();
        oscillator.stop(audioCtx.currentTime + 0.2);

        oscillator.onended = () => { };
    }

    function startBeeping() {
        if (beepIntervalId) return;
        beepIntervalId = setInterval(() => {
            playBeep();
        }, 1000);
    }

    function stopBeeping() {
        if (beepIntervalId) {
            clearInterval(beepIntervalId);
            beepIntervalId = null;
        }
    }

    modalOkBtn.addEventListener('click', () => {
        stopBeeping();
    });

    function showModal() {
        timeExpiredModal.show();
        startBeeping();
    }

    function updateTimer() {
        const endTimestamp = parseInt(localStorage.getItem(TIMER_KEY));
        if (!endTimestamp) {
            timerDisplay.textContent = '00:00';
            startBtn.disabled = false;
            stopInterval();
            return;
        }

        const now = Date.now();
        let diffSeconds = Math.round((endTimestamp - now) / 1000);

        if (diffSeconds <= 0) {
            timerDisplay.textContent = '00:00';
            localStorage.removeItem(TIMER_KEY);
            startBtn.disabled = false;
            stopInterval();

            showModal();
        } else {
            timerDisplay.textContent = formatTime(diffSeconds);
            startBtn.disabled = true;
        }
    }

    function stopInterval() {
        if (intervalId) {
            clearInterval(intervalId);
            intervalId = null;
        }
    }

    startBtn.addEventListener('click', () => {
        let duration = prompt("Введіть час таймера в хвилинах (1-60):", "5");
        duration = parseInt(duration, 10);
        if (isNaN(duration) || duration < 1 || duration > 60) {
            alert("Будь ласка, введіть число від 1 до 60.");
            return;
        }
        const endTime = Date.now() + duration * 60 * 1000;
        localStorage.setItem(TIMER_KEY, endTime.toString());
        updateTimer();
        if (!intervalId) {
            intervalId = setInterval(updateTimer, 1000);
        }
    });

    resetBtn.addEventListener('click', () => {
        localStorage.removeItem(TIMER_KEY);
        timerDisplay.textContent = '00:00';
        startBtn.disabled = false;
        stopInterval();
        stopBeeping();
    });

    if (localStorage.getItem(TIMER_KEY)) {
        updateTimer();
        if (!intervalId) {
            intervalId = setInterval(updateTimer, 1000);
        }
    }
        })();
</script>
    <script>
(() => {
    const themeToggleBtn = document.getElementById('themeToggleBtn');

    // При завантаженні сторінки — перевірка localStorage
    if (localStorage.getItem('theme') === 'dark') {
        document.body.classList.add('dark-theme');
    }

    // Перемикач теми
    themeToggleBtn.addEventListener('click', () => {
        document.body.classList.toggle('dark-theme');
        if (document.body.classList.contains('dark-theme')) {
            localStorage.setItem('theme', 'dark');
        } else {
            localStorage.setItem('theme', 'light');
        }
    });
})();
</script>
    }
